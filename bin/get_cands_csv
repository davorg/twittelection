#!/usr/bin/perl

use strict;
use warnings;
use 5.010;

use open IO => ':encoding(utf8)';

use DateTime;
use Getopt::Long;
use Sys::RunAlone;
use Text::CSV_XS;
#use Carp::Always;

use lib 'lib';
use TwittElection::App;
use TwittElection::Util 'partition_hash';
use TwittElection::Constants;

my $verbose;
GetOptions(verbose => \$verbose);

my $app = TwittElection::App->new({ verbose => $verbose });

my %constits = get_new_data($app);

my $cons_rs;
if (@ARGV) {
  $cons_rs = $app->constituency_rs->search({
    mapit_id => \@ARGV,
  });
} else {
  $cons_rs = $app->constituency_rs;
}

foreach ($cons_rs->all) {
  process_con($_, $constits{$_->demclub_id}, $app);
}

if ($app->has_changed) {
  $app->logger->info('Candidate updates received');
} else {
  $app->logger->info('No candidate updates received');
}

sub process_con {
  my ($db_con, $file_con, $ap) = @_;

  # What we need to do here.
  # We have a constituency.
  # Get the candidates we have in the database.
  # Get the candidates we have in the new file.
  # Create three lists:
  # * Candidates to add to the database.
  # * Candidates to update in the database.
  # * Candidates to remove from the database.

  my $con_changed = 0;
  $ap->logger->info($db_con->name . ' (' . $db_con->mapit_id . ')');

  my %file_cands = ();
  if ($file_con and $file_con->{cands}) {
    %file_cands = map { $_->{id} => $_ } @{ $file_con->{cands} };
  }

  my %db_cands = map { $_->yournextmp_id => $_ } $db_con->candidates;

  if (not keys %file_cands and not keys %db_cands) {
    $ap->logger->info('No candidates in file or database. Skipping...');
    next;
  }

  my ($file_only, $both, $db_only) = partition_hash(\%file_cands, \%db_cands);

  for (values %$file_only) {
    my ($party_id) = $_->{party}{id} =~ /(\d+)/sxm;
    my $party = get_party($party_id, $_->{party}{name}, $ap);

    add_candidate($_, $db_con, $party, $ap);

    $con_changed = 1;
  }

  for (values %$both) {
    my ($party_id) = $_->[0]{party}{id} =~ /(\d+)/sxm;
    my $party = get_party($party_id, $_->[0]{party}{name}, $ap);

    if (cand_data_changed(@$_)) {
      update_cand(@$_, $party, $db_con, $ap);

      $con_changed = 1;
    }
  }

  for (values %$db_only) {
    delete_cand($_, $ap);

    $con_changed = 1;
  }

  if ($con_changed) {
    $db_con->update({
      candidates_updated_time => DateTime->now,
      list_checked_time       => undef,
    });
    $ap->has_changed(1);
  }

  return;
}

sub delete_cand {
  my ($cand, $a) = @_;

  $a->logger->info('* Deleting ' . $cand->name . ' / ' .
      $cand->party->name .
      ' / ' . $cand->twitter);

  $cand->delete;

  return;
}

sub update_cand {
  my ($file, $db, $party, $con, $a) = @_;

  $a->logger->info("* Updating $file->{name} / " .
      $file->{party}{name} .
      " / \@$file->{twitter}");
  $db->update({
    yournextmp_id   => $file->{id},
    name            => $file->{name},
    twitter         => $file->{twitter},
    party_id        => $party->id,
    constituency_id => $con->id,
  });

  return;
}

sub cand_data_changed {
  my ($file, $db) = @_;

  return 1 if $file->{name}    ne $db->name;
  return 1 if $file->{twitter} ne $db->twitter;
  return;
}

sub get_party {
  my ($party_id, $party_name, $a) = @_;
  my $par_rs = $a->party_rs;

  my $party;
  if ( not $party = $par_rs->find({ yournextmp_id => $party_id })) {
    $party = $par_rs->create({
      name => $party_name,
      yournextmp_id => $party_id,
    });
  }

  return $party;
}

sub add_candidate {
  my ($cand, $con, $party, $a) = @_;

  my $can_rs = $a->candidate_rs;

  $a->logger->info("* Adding $cand->{name} / " .
      $cand->{party}{name} .
      " / \@$cand->{twitter}");
  # Note: We use update_or_create here instead of create in order to
  # deal with the situation where a candidate moves from one
  # constituency to another.
  $can_rs->update_or_create({
    yournextmp_id   => $cand->{id},
    name            => $cand->{name},
    twitter         => $cand->{twitter},
    party_id        => $party->id,
    constituency_id => $con->id,
  });

  return;
}

sub get_new_data {
  my ($a) = @_;
  # Skip header
  $app->get_data_line;

  while (my $row = $a->get_data_line) {
    my $constit_id = $row->[COL_CONSTIT_ID];
    $constit_id =~ s/^WMC://sxm;
    $constits{$constit_id}{name} = $row->[COL_CONSTIT_NAME];
    my $cand;
    $cand->{id}          = $row->[COL_CAND_ID];
    $cand->{name}        = $row->[COL_CAND_NAME];
    $cand->{party}{id}   = $row->[COL_PARTY_ID];
    $cand->{party}{name} = $row->[COL_PARTY_NAME];
    $cand->{twitter}     = $row->[COL_CAND_TWITTER];

    push @{ $constits{$constit_id}{cands} }, $cand;
  }

  return %constits;
}

__END__
